{"version":3,"sources":["components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Link","props","useState","style","name","ServiceName","toLowerCase","className","href","ServiceLink","src","alt","onClick","setBackgroundStyle","BackgroundStyle","data-text","Footer","App","background","setBackground","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAWA,SAASA,EAAKC,GAAkB,IAAD,EACDC,mBAAS,QADR,mBACpBC,EADoB,KAErBC,GAFqB,KAEdH,EAAMI,YAAYC,eAC/B,OACI,yBAAKC,UAAW,gBACZ,yBAAKA,UAAW,gBACZ,uBAAGC,KAAM,WAAaP,EAAMQ,aAAa,yBAAKC,IAAK,sBAAwBN,EAAO,OACpCO,IAAKP,EAAO,QACZG,UAAWJ,MAE7D,yBAAKS,QAAS,kBAAMX,EAAMY,mBAAmBZ,EAAMa,kBAAkBP,UAAW,mBAC5E,uBAAGA,UAAW,SAAUQ,YAAWd,EAAMI,aAAcJ,EAAMI,eAM7E,SAASW,IACL,OACI,yBAAKT,UAAW,0BACZ,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,qBACX,wBAAIQ,YAAW,cAAeR,UAAW,UAAzC,kBA8BLU,MAtBf,WAAgB,IAAD,EACyBf,mBAAS,gBADlC,mBACJgB,EADI,KACQC,EADR,KAEX,OACI,yBAAKC,GAAIF,EAAYX,UAAW,QAC5B,yBAAKa,GAAI,kBACL,yBAAKA,GAAI,gBACL,yBAAKA,GAAI,QACL,kBAACpB,EAAD,CAAMa,mBAAoBM,EAAeL,gBAAiB,aAAcT,YAAa,KAC/EI,YAAa,yBACnB,kBAACT,EAAD,CAAMa,mBAAoBM,EAAeL,gBAAiB,aAAcT,YAAa,KAC/EI,YAAa,kBACnB,kBAACT,EAAD,CAAMa,mBAAoBM,EAAeL,gBAAiB,iBACpDL,YAAa,0BACbJ,YAAa,SAG3B,kBAACW,EAAD,SC7CIK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.67ba54a9.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport '../css/AppStyle.css';\nimport '../css/animation.scss';\n\ntype LinkInfo = {\n    ServiceName: string,\n    ServiceLink?: string,\n    BackgroundStyle: string,\n    setBackgroundStyle: (style: string) => void,\n}\n\nfunction Link(props: LinkInfo) {\n    const [style, setStyle] = useState('logo');\n    const name = props.ServiceName.toLowerCase();\n    return (\n        <div className={'link-wrapper'}>\n            <div className={'logo-wrapper'}>\n                <a href={\"https://\" + props.ServiceLink}><img src={\"/personal_page/img/\" + name + '.png'}\n                                                              alt={name + \"-logo\"}\n                                                              className={style}/></a>\n            </div>\n            <div onClick={() => props.setBackgroundStyle(props.BackgroundStyle)} className={'link-container '}>\n                <p className={'glitch'} data-text={props.ServiceName}>{props.ServiceName}</p>\n            </div>\n        </div>\n    )\n}\n\nfunction Footer() {\n    return (\n        <div className={\"footer-wrapper-wrapper\"}>\n            <div className=\"footer-wrapper\">\n                <div className=\"footer-container \">\n                    <h1 data-text={'By Levandro'} className={'glitch'}>By Levandro</h1>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\nfunction App() {\n    const [background, setBackground] = useState('main-wrapper');\n    return (\n        <div id={background} className={'main'}>\n            <div id={'layout-opacity'}>\n                <div id={'menu-wrapper'}>\n                    <div id={'menu'}>\n                        <Link setBackgroundStyle={setBackground} BackgroundStyle={'vk-wrapper'} ServiceName={'VK'}\n                              ServiceLink={'vk.com/glodboyshawty'}/>\n                        <Link setBackgroundStyle={setBackground} BackgroundStyle={'tg-wrapper'} ServiceName={'TG'}\n                              ServiceLink={'t.me/Levandro'}/>\n                        <Link setBackgroundStyle={setBackground} BackgroundStyle={'github-wrapper'}\n                              ServiceLink={'github.com/notsecret808'}\n                              ServiceName={'GH'}/>\n                    </div>\n                </div>\n                <Footer/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}